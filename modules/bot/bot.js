import { Telegraf, Markup } from 'telegraf';
import { BOT_TOKEN, ADMIN_ID, WEBHOOK_URL } from '../config/env.js';
import { createUser, getUser, getAllUsers, updateUserField, getUserById, setPremium, addOrUpdateUserInSupabase } from '../db/userRepository.js';
import { logEvent } from '../db/logRepository.js';
import { enqueue } from './trackProcessor.js';
import { texts, kb, isSubscribed, getPersonalMessage, formatMenuMessage, sendAudioSafe, extractUrl } from './botUtils.js';
import { saveTrackForUser } from '../db/trackRepository.js';
import { broadcastMessage } from './broadcastHandler.js';
import { sanitizeFilename } from '../utils/fileUtils.js';
import { handleReferralBonus } from './referralHandler.js';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const cacheDir = path.join(__dirname, '../../cache');

const bot = new Telegraf(BOT_TOKEN);

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.start(async ctx => {
  const user = ctx.from;
  const referrerId = ctx.startPayload;

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await createUser(user.id, user.first_name, user.username);
  await addOrUpdateUserInSupabase(user.id, user.first_name, user.username, referrerId);

  // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
  await logEvent(user.id, 'registered');

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
  if (referrerId) {
    await handleReferralBonus(user.id, referrerId);
  }

  const fullUser = await getUser(user.id);

  await ctx.reply(getPersonalMessage(fullUser));

  // ‚è≥ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É ~1.5 —Å–µ–∫—É–Ω–¥—ã
  await ctx.replyWithChatAction('typing');
  await new Promise(resolve => setTimeout(resolve, 2000));

  await ctx.reply(formatMenuMessage(fullUser), kb());
});

bot.hears(texts.menu, async ctx => {
  const user = await getUser(ctx.from.id);
  await ctx.reply(formatMenuMessage(user), kb());

  // –î–æ–±–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –±–æ–Ω—É—Å –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
  if (!user.subscribed_bonus_used) {
    await ctx.reply(
      '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏:',
      Markup.inlineKeyboard([
        Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_subscription')
      ])
    );
  }
});

bot.hears(texts.help, async ctx => {
  await ctx.reply(texts.helpInfo, kb());
});

bot.hears(texts.upgrade, async ctx => {
  await ctx.reply(texts.upgradeInfo, kb());
});

bot.hears(texts.mytracks, async ctx => {
  const user = await getUser(ctx.from.id);
  if (!user) return ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');

  let tracks = [];
  try {
    tracks = user.tracks_today ? JSON.parse(user.tracks_today) : [];
  } catch (e) {
    console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ tracks_today:', e);
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }

  if (!tracks.length) return ctx.reply('–°–µ–≥–æ–¥–Ω—è —Ç—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ —Å–∫–∞—á–∏–≤–∞–ª.');

  await ctx.reply(`–°–∫–∞—á–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è ${tracks.length} –∏–∑ ${user.premium_limit || 10}`);

  for (let i = 0; i < tracks.length; i += 5) {
    const chunk = tracks.slice(i, i + 5);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–∫–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º fileId
    const mediaGroup = chunk
      .filter(t => t.fileId && typeof t.fileId === 'string' && t.fileId.trim().length > 0)
      .map(t => ({
        type: 'audio',
        media: t.fileId
      }));

    if (mediaGroup.length > 0) {
      try {
        await ctx.replyWithMediaGroup(mediaGroup);
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ-–ø–∞—á–∫–∏:', e);

        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Ç—Ä–µ–∫—É –±–µ–∑ caption
        for (let t of chunk) {
          try {
            await ctx.replyWithAudio(t.fileId);
          } catch {
            // –ï—Å–ª–∏ fileId –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            const filePath = path.join(cacheDir, `${sanitizeFilename(t.title)}.mp3`);
            if (fs.existsSync(filePath)) {
              const msg = await ctx.replyWithAudio({ source: fs.createReadStream(filePath) });
              const newFileId = msg.audio.file_id;

              // –û–±–Ω–æ–≤–ª—è–µ–º fileId –≤ –±–∞–∑–µ
              await saveTrackForUser(ctx.from.id, t.title, newFileId);

              console.log(`–û–±–Ω–æ–≤–ª–µ–Ω fileId –¥–ª—è —Ç—Ä–µ–∫–∞ "${t.title}" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
            } else {
              console.warn(`–§–∞–π–ª –¥–ª—è —Ç—Ä–µ–∫–∞ "${t.title}" –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ.`);
              await ctx.reply(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ "${t.title}". –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            }
          }
        }
      }
    } else {
      // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ fileId –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
      for (let t of chunk) {
        const filePath = path.join(cacheDir, `${sanitizeFilename(t.title)}.mp3`);
        if (fs.existsSync(filePath)) {
          const msg = await ctx.replyWithAudio({ source: fs.createReadStream(filePath) });
          const newFileId = msg.audio.file_id;

          await saveTrackForUser(ctx.from.id, t.title, newFileId);

          console.log(`–û–±–Ω–æ–≤–ª–µ–Ω fileId –¥–ª—è —Ç—Ä–µ–∫–∞ "${t.title}" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
        } else {
          console.warn(`–§–∞–π–ª –¥–ª—è —Ç—Ä–µ–∫–∞ "${t.title}" –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ.`);
          await ctx.reply(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ "${t.title}". –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }
      }
    }
  }
});

bot.command('admin', async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
  }

  try {
    const users = await getAllUsers();
    const totalUsers = users.length;
    const totalDownloads = users.reduce((sum, u) => sum + (u.total_downloads || 0), 0);

    const activeToday = users.filter(u => {
      if (!u.last_active) return false;
      const last = new Date(u.last_active);
      const now = new Date();
      return last.toDateString() === now.toDateString();
    }).length;

    await ctx.reply(
`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\nüì• –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫: ${totalDownloads}\nüü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${activeToday}\n\nü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.\nüß≠ –ü–∞–Ω–µ–ª—å: ${WEBHOOK_URL}/dashboard`
    );
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≤ /admin:', e);
    await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});
bot.action('check_subscription', async ctx => {
  const subscribed = await isSubscribed(bot, ctx.from.id);
  if (subscribed) {
    const user = await getUser(ctx.from.id);
    if (user.subscribed_bonus_used) {
      await ctx.reply('–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ–Ω—É—Å –ø–æ–¥–ø–∏—Å–∫–∏.');
    } else {
      const until = Date.now() + 7 * 24 * 3600 * 1000;
      await setPremium(ctx.from.id, 50, 7);
      await updateUserField(ctx.from.id, 'subscribed_bonus_used', true);
      await ctx.reply('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: 7 –¥–Ω–µ–π Plus.');
    }
  } else {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @BAZAproject –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.');
  }
  await ctx.answerCbQuery();
});
bot.on('text', async ctx => {
  const url = extractUrl(ctx.message.text);
  if (!url) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç SoundCloud.');
    return;
  }

  try {
    await ctx.reply('üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É –º–∏–Ω—É—Ç.');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', e);
  }

  enqueue(ctx, ctx.from.id, url).catch(async e => {
    console.error('–û—à–∏–±–∫–∞ –≤ enqueue:', e);
    try {
      await bot.telegram.sendMessage(ctx.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏.');
    } catch {}
  });
});

export default bot;
